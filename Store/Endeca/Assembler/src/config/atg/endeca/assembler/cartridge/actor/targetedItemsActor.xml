<?xml version="1.0" encoding="UTF-8"?>


<!-- 
  input: randomizeItems - boolean.  true if should execute targetingRandom.  False or undefined otherwise
  input: count - integer. Number of items for the targeter to return
  input: componentPath - String. Name of the targeter to for targetingRandom or targetingForEach to use
  input: repositoryName - String. Name of the repository that the targeted items should be in
  
  output: an array of item data (differs for product and promotional content) as an array named "items"
 -->
<actor-template default-chain-id="getTargetedItems" xsi:noNamespaceSchemaLocation="http://www.atg.com/xsds/actorChain_1.0.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <actor-chain id="getTargetedItems" transaction="TX_SUPPORTS">
    <!-- Decide whether to use targetingRandom or targetingForEach to target items
         and then return the targeted items -->
    <actor id="targeterSwitch" name="/atg/targeting/TargetingServicesActor"
      return-model-var="items" chain-id="targeterSwitch">
      <input name="randomize"        value="${randomize}"/>
      <input name="componentPath"    value="${componentPath}"/>
      <input name="count"            value="${count}"/>
      <input name="fireViewItemEvent" value="false"/>
    </actor>
    
    <!-- Loop through the targeted items and perform repository and item validation.
         Then fetch and output info about the targeted items that passed validation -->
    <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEach">
      <input name="array" value="${items.targeterResults}"/>
      <oparam name="output">
        <droplet id="itemValidatorDroplet" name="/atg/store/droplet/ItemValidatorDroplet">
          <input name="item" value="${forEach.element}"/>
          <oparam name="true">
            <droplet id="repositoryIdSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
              <input name="value" value="${forEach.element.itemDescriptor.repository.repositoryName.equals(repositoryName)}"/>
              <oparam name="true">
                <!-- Output item descriptions that dont depend on item type -->
                <output id="items" name="items[${forEach.index}]" value="${forEach.element}"/>
                <droplet id="itemDescriptorSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
                  <input name="value" value="${forEach.element.itemDescriptor.itemDescriptorName}" />
                  <oparam name="product">
                    <!-- Output product specific information -->
                    <actor id="getProductInfo" name="/atg/endeca/assembler/cartridge/actor/TargetedItemsActor"
                        chain-id="getProductInfo" return-model-var="missingData">
                      <input name="product" value="${forEach.element}" />
                      <output id="items" name="items[${forEach.index}]" add-map-children="true" value="${missingData.product}" />
                    </actor>
                  </oparam>
                </droplet>
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>  
  
  <!-- input:  product - a product repository item 
       output: product - object.  list and sale price ranges with currency code, site ID, siteName and repositoryID
  -->
  <actor-chain id="getProductInfo">
    
    <!-- price ranges for sale and list price lists -->
    <actor id="productPriceRanges" name="/atg/commerce/pricing/PricingActor"
      return-model-var="productPriceRanges" chain-id="productPriceRanges">
      <input name="productId" value="${product.repositoryId}" />
      <output id="productPriceRanges" name="product" add-map-children="true" value="${productPriceRanges}" />
    </actor>

    <!-- add currency code to prices -->
    <droplet id="currencyCodeDroplet" name="/atg/commerce/pricing/CurrencyCodeDroplet" var="CurrencyCodeDroplet">
      <input name="locale" value="${nucleus['/atg/userprofiling/Profile'].priceList.locale}" />
      <oparam name="output">
        <output id="productCurrencyCode" name="product.currencyCode" value="${CurrencyCodeDroplet.currencyCode}" />
      </oparam>
    </droplet>
    
    <!-- add site id -->
    <droplet id="siteIdDroplet" name="/atg/commerce/multisite/SiteIdForCatalogItem" var="SiteIdDroplet">
      <input name="item"            value="${product}" />
      <input name="shareableTypeId" value="crs.MobileSite" />
      <oparam name="output">
        <output id="productSiteId" name="product.siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
        <droplet id="getSiteDroplet" name="/atg/dynamo/droplet/multisite/GetSiteDroplet"
          var="GetSiteDroplet">
          <input name="siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
          <oparam name="output">
            <output id="productSiteName" name="product.siteName" value="${GetSiteDroplet.site.name}" />
          </oparam>
        </droplet>
      </oparam>
    </droplet>
    
    <!-- add item's repository id -->
    <output id="productRepositoryId" name="product.repositoryId" value="${product.repositoryId}" />
  </actor-chain>

</actor-template>
<!-- @version $Id: //hosting-blueprint/B2CBlueprint/version/11.3.1/Endeca/Assembler/config/atg/endeca/assembler/cartridge/actor/targetedItemsActor.xml#1 $$Change: 1497274 $-->