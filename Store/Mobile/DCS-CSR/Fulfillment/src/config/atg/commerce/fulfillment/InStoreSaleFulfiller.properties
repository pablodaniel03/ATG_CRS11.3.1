# @version $Id: //hosting-blueprint/B2CBlueprint/version/11.3.1/Mobile/DCS-CSR/Fulfillment/config/atg/commerce/fulfillment/InStoreSaleFulfiller.properties#1 $$Change: 1497274 $
$class=atg.commerce.fulfillment.InStoreSaleFulfiller
#
# If true, InStoreSaleFulfiller will print out debugging messages.
#
#loggingDebug=true

#
# Used to manage all transactions.
#
transactionManager^=Configuration.transactionManager

#
# A class providing convenient methods used through fulfillment.
#
orderFulfillmentTools^=Configuration.orderFulfillmentTools

#
# The manager of the inventory fulfilled by the InStoreSaleFulfiller.
#
inventoryManager=/atg/commerce/inventory/InventoryManager

#
# The order manager is used to manipulate all orders processed during fulfillment.
#
orderManager^=Configuration.orderManager

#
# Used to manager order processing
#
fulfillmentPipelineManager^=Configuration.fulfillmentPipelineManager


#
# This class will be used to process all ModifyOrderNotification
# and ModifyOrder messages.
#
modificationHandler=/atg/commerce/fulfillment/InStoreSaleFulfillerModificationHandler

#
# The port over which all ModifyOrderNotification messages
# are sent.
#
modifyOrderNotificationPort^=Configuration.modifyOrderNotificationPort

#
# The lock manager ensures that two messages affecting the
# same order are not simultaneously processed.
#
clientLockManager^=Configuration.clientLockManager

#
# This is the name of this fulfiller.
#
fulfillerName=InStoreSaleFulfiller

#
# All messages sent from the InStoreSaleFulfiller will use this as
# All messages sent from the InStoreSaleFulfiller will use this as
# the messages messageSource
#
messageSourceName=InStoreSaleFulfiller

#
# If this is true, an OUT_OF_STOCK item is considered an error
# resulting in the ShippingGroup being set to
# PENDING_MERCHANT_ACTION. If this is false, OUT_OF_STOCK is
# treated similarly to BACK_ORDERED or PRE_ORDERED.  By default,
# this property is false.
#
outOfStockIsError=true

#
# If true, all partially shippable shipping groups will
# be split into a group that can ship, and one that cannot.
#
allowPartialShipmentDefault^=Configuration.allowPartialShipmentDefault

#
# This is the name of the property in the ShippingGroup's
# specialInstructions that specifies whether partially shippable
# groups should be split into a shippable group and a non-shippable
# group.
#
partialShipPropertyName^=Configuration.partialShipPropertyName

#
# These are the classes that store state information
# used by the InStorePickupFulfiller
#
shippingGroupStates^=Configuration.shippingGroupStates
shipItemRelationshipStates^=Configuration.shipItemRelationshipStates
commerceItemStates^=Configuration.commerceItemStates

#
# These are the chains to run the pipeline processing
#
chainToRunMap=\
        fulfillOrderFragmentChain=handleInStoreSaleFulfillOrderFragment,\
        updateInventoryChain=handleInStoreSaleUpdateInventory,\
        shipShippingGroupChain=shipShippingGroup,\
        shippingGroupHasShippedChain=shippingGroupHasShipped,\
        processMultipleShippingGroupsChain=processInStoreSaleGroups,\
        retrieveWaitingShipMapChain=retrieveWaitingShipMap

#
# Indicates that the orderId is obtained from the commerce Message
#
lookUpOrderIdFromMessage=true

#
# If the orderId sent in the commerce message is null, try to obtain it
# from the order object sent in the commerce message
#
lookUpOrderIdFromOrder=true

